class Node:
    def __init__(self, data, next_node=None, back_node=None):
        self.data = data
        self.next = next_node
        self.back = back_node

def convert_arr_to_dll(arr):
   
    head = Node(arr[0])
  
    prev = head

    for i in range(1, len(arr)):
       
        temp = Node(arr[i], None, prev)
    
        prev.next = temp
        
        prev = temp

    return head

def print_dll(head):
    while head is not None:

        print(head.data, end=" ")

        head = head.next

def delete_tail(head):
    if head is None or head.next is None:
        return None  

    tail = head
    while tail.next is not None:

        tail = tail.next

    new_tail = tail.back
    new_tail.next = None
    tail.back = None

    del tail

    return head

if __name__ == "__main__":
    arr = [12, 5, 8, 7]
    head = convert_arr_to_dll(arr)

    print("Original Doubly Linked List:", end=" ")
    print_dll(head)

    print("\n\nAfter deleting the tail node:", end=" ")
    head = delete_tail(head)
    print_dll(head)

class Node {
    constructor(data, nextNode = null, backNode = null) {
        this.data = data;
        this.next = nextNode;
        this.back = backNode;
    }
}


function convertArrToDLL(arr) {

    const head = new Node(arr[0]);

    let prev = head;

    for (let i = 1; i < arr.length; i++) {
       
        const temp = new Node(arr[i], null, prev);
     
        prev.next = temp;
       
        prev = temp;
    }

    return head;
}


function printDLL(head) {
    while (head !== null) {

        console.log(head.data + " ");

        head = head.next;
    }
}


function deleteTail(head) {
    if (head === null || head.next === null) {
        return null;  
    }

    let tail = head;
    while (tail.next !== null) {

        tail = tail.next;
    }

    const newTail = tail.back;
    newTail.next = null;
    tail.back = null;

    delete tail;

    return head;
}

const arr = [12, 5, 8, 7];
let head = convertArrToDLL(arr);

console.log("Original Doubly Linked List:", end=" ");
printDLL(head);

console.log("\n\nAfter deleting the tail node:", end=" ");
head = deleteTail(head);
printDLL(head);
